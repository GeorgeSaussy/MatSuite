comment BALANCE and BALBAK in ALGOL as found in Parlett and Reinsch 1969;
procedure balance(n, b) trans: (a) result: (low, hi, d);
    value n, b;
    integer n, b, low, hi;
    array a, d;
comment reduce the norm of a[1:n, 1:n] by exact diagonal similarity
    transformations stored in d[1:n]
begin
    integer i, j, k, l; real b2, c, f, g, r, s; Boolean noconv;
    procedure exc(m); value m; integer m;
    begin
        d[m]:=j;
        if j!=m then
        begin
            for i:=1 step 1 until k do
            begin f:=a[i,j]; a[i,j]:=a[i,m]; a[i,m]:=f end;
            for i:=l step 1 until n do
            begin f:=a[j,i]; a[j,i]:=a[m,i]; a[m,i]:=f end
        end j!=m
    end exc;
    b2:=b*b; l:=1; k:=n;
    comment search for rows isolating an eigenvalue and push them down;
L1:
    for j:=k step -1 until 1 do
    begin
        r:=0;
        for i:=1 step 1 until j-1,j+1 step 1 until k do
            r:=r+abs(a[j,i]);
        if r=0 then
        begin exc(k); k:=k-1; go to L1 end
    end j;
    comment search for columns isolating an eigenvalue and push them left;
L2:
    for j:=l step 1 until k do
    begin
        c:=0;
        for i:=l step 1 until j-1, j+1 step 1 until k do
            c:=c+abs(a[i,j]);
        if c=0 then
        begin exc(l); l:=l+1; go to L2 end
    end j;
    comment now balance the submatrix in rows l through k;
    low:=l; hi:=k;
    for i:=l step 1 until k do d[i]:=1;
iteration:
    noconv:=false;
    for i:=l step 1 until k do
    begin
        c:=r:=0;
        for j:=l step 1 until i-1, i+1 step 1 until k do
        begin c:=c+abs(a[j,i]);r:=r+abs(a[i,j]) end j;
        g:=r/b; f:=1; s:=c+r;
    L3:
        if c<g then begin f:=f*b; c:=c*b2; go to L3 end;
        g:=r*b;
    L4:
        if c>=g then begin f:=f/b; c:=c/b2; go to L4 end;
        comment the preceting four lines may be replaces by a machine language
            procedure computing the exponent sig such that
            sqrt(r/(c*b))<=b[up arrow]sig<sqrt(r*b/c). Now balance;
        if (c+r)/f<0.95*s then
        begin
            g:=1/f; d[i]:=d[i]*f; noconv:=true;
            for j:=l step 1 until n do a[i,j]:=a[i,j]*g;
            for j:=1 step 1 until k do a[j,i]:=a[j,i]*f
        end if;
        comment the j loops may be done by exponent modification in machine
            language;
    end i;
    if noconv then go to interation
end balance;

procedure balbak(n,low,hi,m) data: (d) trans: (z);
    value n,low,hi,m;
    integer n,low,hi,m;
    array d,z;
comment Backward tranformation of a set of right-hand eigenvectors of a balanced
    matrix into the eigenvectors of the original matrix from which the balanced
    matrix was derived by a call of procedure balance;
begin
    integer i,j,k; real s;
    for i:=low step 1 until hi do
    begin
        s:=d[i];
        comment left-hand eigenvectors are back transformed of the foregoing
            statement is replaced by s:=1/d[i];
        for j:=1 step 1 until m do z[i,j]:=z[i,j]*s
    end i;
    for i:=low-1 step -1 until 1, hi+1 step 1 until do
    begin
        k:=d[i];
        if k!=i then for j:=1 step 1 until m do
        begin s:=s[i,j]; z[i,j]:=z[k,j]; z[k,j]:=s end j
    end i
end balbak;
